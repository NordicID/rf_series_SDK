// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "plserver.h"

/////////////////////////////////////////////////////////////////////////////
// CPLServer

IMPLEMENT_DYNCREATE(CPLServer, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CPLServer properties

short CPLServer::GetBoxPerRow()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CPLServer::SetBoxPerRow(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

BOOL CPLServer::GetNotify()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CPLServer::SetNotify(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CPLServer operations

BOOL CPLServer::Ack(long id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::Bell(long id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::Button(long id, short pos, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, txt);
	return result;
}

BOOL CPLServer::ClearCmd(long id, short cmd, short start, short stop)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, cmd, start, stop);
	return result;
}

void CPLServer::ClearSendBuffer(long id)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 id);
}

BOOL CPLServer::CmdSet(long id, short* commands, short length)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2 VTS_I2;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, commands, length);
	return result;
}

BOOL CPLServer::Connect(short com_port)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		com_port);
	return result;
}

BOOL CPLServer::FieldCmd(long id, short pos, short fcmd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, fcmd);
	return result;
}

BOOL CPLServer::FldTxt(long id, short pos, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, txt);
	return result;
}

CString CPLServer::GetData(long id, short pos)
{
	CString result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		id, pos);
	return result;
}

short CPLServer::GetExtraID(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

short CPLServer::GetLastFrameID(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

short CPLServer::GetRSSI(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::IsData(long id, short pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos);
	return result;
}

BOOL CPLServer::NewField(long id, short pos, short length, short style)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, length, style);
	return result;
}

BOOL CPLServer::PopMessage(long id, short pos, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, txt);
	return result;
}

BOOL CPLServer::Send(long id, short frameid)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, frameid);
	return result;
}

BOOL CPLServer::SetView(long id, short row)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, row);
	return result;
}

BOOL CPLServer::Text(long id, short pos, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, txt);
	return result;
}

BOOL CPLServer::What(long id, short delay)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, delay);
	return result;
}

void CPLServer::DataIn(short* data, short data_len, short source_addr)
{
	static BYTE parms[] =
		VTS_PI2 VTS_I2 VTS_I2;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 data, data_len, source_addr);
}

BOOL CPLServer::ClearForm(long id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::StartServer(short port)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		port);
	return result;
}

void CPLServer::StopServer()
{
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CPLServer::DataToSerial(long id, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, txt);
	return result;
}

BOOL CPLServer::WaitSerial(long id, short delay)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, delay);
	return result;
}

void CPLServer::DisconnectSerialServer(short ssID)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ssID);
}

short CPLServer::ConnectToSerialServer(LPCTSTR addr, short port)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		addr, port);
	return result;
}

BOOL CPLServer::NewFieldEx(long id, short pos, short length, short style)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, length, style);
	return result;
}

BOOL CPLServer::Receiver(long id, short mode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, mode);
	return result;
}

BOOL CPLServer::IsReceiver(long id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::SendMsg(long receiverID, long senderID, short frameid, short resendTimes)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		receiverID, senderID, frameid, resendTimes);
	return result;
}

short CPLServer::GetFormID(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::SetFormID(long id, short formID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, formID);
	return result;
}

BOOL CPLServer::IsLastAnswerToHsOk(long id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id);
	return result;
}

short CPLServer::GetMessageNumber(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

CString CPLServer::GetHsIdString(long id)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		id);
	return result;
}

short CPLServer::GetSerialData(long id, short* serdata)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id, serdata);
	return result;
}

short CPLServer::GetReceiveBuffer(long id, short* data)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_PI2;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id, data);
	return result;
}

void CPLServer::SetBSCollectDelay(short msDelay)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 msDelay);
}

BOOL CPLServer::Beep(long id, short length, short delay)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, length, delay);
	return result;
}

void CPLServer::SendSSMAck(short ssmID)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ssmID);
}

BOOL CPLServer::SendSSMData(long ssmID, short msgNum, short* data, short length, short retries)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_PI2 VTS_I2 VTS_I2;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ssmID, msgNum, data, length, retries);
	return result;
}

short CPLServer::WaitSSMData(short ssmID, short* ssmData, short ms_waitTime)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_PI2 VTS_I2;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		ssmID, ssmData, ms_waitTime);
	return result;
}

short CPLServer::GetBatteryLevel(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::RFIDField(long id, short pos, short length, short style, short first_page, short last_page)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, length, style, first_page, last_page);
	return result;
}

short CPLServer::RFIDReadPages(long id, short firstPage, short lastPage, short* dataBuffer, short msWait)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2 VTS_PI2 VTS_I2;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id, firstPage, lastPage, dataBuffer, msWait);
	return result;
}

short CPLServer::SendWaitRFIDEngineData(long id, short len, short* dataBuffer, short msWait)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_PI2 VTS_I2;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id, len, dataBuffer, msWait);
	return result;
}

BOOL CPLServer::SpecialCmd(long id, short type, long data)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, type, data);
	return result;
}

short CPLServer::GetSpecialData(long id, short type)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id, type);
	return result;
}

BOOL CPLServer::RedirSSMtoNetworkAdapter(long ssmID, short sessionID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ssmID, sessionID);
	return result;
}

short CPLServer::GetStatus(long id)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::WaitReceiverAck(long id)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id);
	return result;
}

short CPLServer::GetLogItemCount()
{
	short result;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CPLServer::GetLogItem(short ind, long* logStruct)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_PI4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ind, logStruct);
	return result;
}

void CPLServer::SetLog(short mode, short eventBetweenXitems)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 mode, eventBetweenXitems);
}

BOOL CPLServer::StartDataInLog(LPCTSTR logFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		logFile);
	return result;
}

void CPLServer::StopDataInLog()
{
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CPLServer::StartMsgLog(LPCTSTR msgLogFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		msgLogFile);
	return result;
}

void CPLServer::StopMsgLog()
{
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPLServer::SendWaitRFIDEngineDataEx(long id, short len, long* dataBuffer, short msWait)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_PI4 VTS_I2;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		id, len, dataBuffer, msWait);
	return result;
}

BOOL CPLServer::SetText(long id, short pos, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, txt);
	return result;
}

short CPLServer::GetSerialSvrStatus(short connID)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		connID);
	return result;
}

long CPLServer::GetCRCValue(long id)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		id);
	return result;
}

BOOL CPLServer::TextEx(long id, short pos, LPCTSTR txt)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_BSTR;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		id, pos, txt);
	return result;
}

CString CPLServer::GetSourceIPAddr(long id)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		id);
	return result;
}

void CPLServer::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
